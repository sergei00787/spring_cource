Если полиморфные ассоциации или запросы не требуются, выбирайте одну
таблицу для каждого конкретного класса. Другими словами: если вы редко
выполняете (или никогда не выполняете) запрос select bd from BillingDetails bd
и если у вас нет классов, ссылающихся на BillingDetails, отдавайте
предпочтение явному отображению на основе UNION со стратегией InheritanceType.TABLE_PER_CLASS,
поскольку при этом сохраняется возможность
последующего добавления (оптимизированных) полиморфных запросов
и ассоциаций.

Если требуются полиморфные запросы или ассоциации (ассоциация с суперклассом, а следовательно,
со всеми классами иерархии и с динамическим определением конкретного класса во время выполнения),
а подклассы объявляют относительно мало новых полей (особенно если основная
разница между подклассами только в поведении), выбирайте стратегию
InheritanceType.SINGLE_TABLE. Ваша цель в том, чтобы сократить количество столбцов,
которые могут содержать null, и убедить себя (и администратора базы данных),
что денормализованная схема не вызовет впоследствии проблем.

Если требуются полиморфные ассоциации или запросы, а подклассы объявляют много (обязательных к заполнению) полей
(подклассы отличаются в основном данными), выбирайте стратегию InheritanceType.JOINED.
С другой стороны, в зависимости от ширины и глубины иерархии наследования
и возможной стоимости соединений по сравнению с объединениями вы
можете выбрать стратегию InheritanceType.TABLE_PER_CLASS. Такое решение
требует оценки планов выполнения запросов SQL на реальных данных.